# our precmd runs first, as it build up the PROMPT variable
function precmd_main {
	###
	# Decide whether to set a screen title
	if [ -n "$STY" -o -n "$TMUX" ]; then
		TITLEOUTPUT=""
		for ((i=1; i <= ${#title_funcs}; i+=1)); do
			$title_funcs[$i] | read -r OUTPUT
			[ -n "$OUTPUT" ] && TITLEOUTPUT+="${OUTPUT}:"
		done
		printf "\x1bk%s\x1b\\" "${TITLEOUTPUT%:}"
	fi
	# Now that we have all of our variables set, let our theme compute its prompt
	theme_prompt
}

function precmd {
	# Capture our exit code
	local exitcode=$?
	# run all of our precmd functions setup for us
	local -A jobs
	jobs=( ${(kv)jobtexts[@]} )
	local i
	for ((i=1; i <= ${#precmd_funcs}; i+=1)); do
		$precmd_funcs[$i]
	done
}

function preexec {
	# run all of our preexec functions
	# this is off by 1 because preexec_funcs is initalized with nothing
	local i
	for ((i=1; i <= ${#preexec_funcs}; i+=1)); do
		$preexec_funcs[$i] "$1"
	done
}

function myzsh {
	local verb="$1"
	local mod="$2"
	[ -n "$verb" ] && shift

	# figure out what to do
	case "$verb" in
	# Make a new branch based of the development branch
	branch)
		local branch="$1"
		if [ -z "$branch" ]; then
			myzsh error "Must specify a branch to fork from dev."
			return
		fi
		cd $MYZSH
		git checkout dev
		git checkout -b "$branch"
	;;
	# merge a branch into the development branch
	merge)
		local branch="$1"
		if [ -z "$branch" ]; then
			myzsh error "Must specify a branch to merge into dev."
			return
		fi
		cd $MYZSH
		git checkout "$branch" || return
		git rebase dev || return
		git checkout dev
		git merge --no-ff "$branch" -m "Merge branch '$branch' into dev"
	;;
	# reload a specific module's functions
	reload)
		if [ -z "$mod" ]; then
			myzsh error "Must specify a module to reload"
			return 1
		fi
		[ -z $MYZSH/**/modules/$mod/$mod(N) ] 2>/dev/null && myzsh error "Cannot find module $mod" && return 1
		source $MYZSH/**/modules/$mod/$mod
	;;
	# edit a module
	edit)
		if [ -z "$mod" ]; then
			$EDITOR "$HOME/.zshrc"
		else
			if [ -z $MYZSH/**/modules/$mod/$mod(N) ]; then
				myzsh error "Cannot find module $mod"
				printf "Create it? (y/n):"
				if read -q; then
					mkdir "$MYZSH/modules/$mod"
					touch "$MYZSH/modules/$mod/$mod"
				else
					return 1
				fi
			fi
			$EDITOR $MYZSH/**/modules/$mod/$mod
		fi
	;;
	# update all of myzsh
	update)
		local dir="$1"
		if [ -z "$dir" ]; then
			(
				echo "Updating myzsh"
				cd "$MYZSH"
				# figure out our current branch
				local branch=$(git -c color.branch=no branch | awk '/^\*/ {print $2}')
				# if we're not on master or dev
				if [ "$branch" != "master" -a "$branch" != "dev" ]; then
					# assume the user knows what they're doing
					git pull
				else
					local -A remotes
					remotes[github]="https://github.com/brimstone/myzsh"
					remotes[gitorious]="git://gitorious.org/brimstone/myzsh.git"
					remotes[bitbucket]="https://bitbucket.org/brimston3/myzsh.git"
					remotes[thenarrows]="https://the.narro.ws/git/myzsh"
					# loop over all of our remotes
					for r in $(git remote); do
						# if our remote is already configured
						if [ -n "$remotes[$r]" ]; then
							# update it
							git pull "$r" "$branch"
							# remove it from our temp array
							unset "remotes[$r]"
						else
						# other wise, remove it
							git remote remove "$r"
						fi
					done
					# if we missed any remotes, set them up now and fetch from them
					for r in "${(k)remotes[@]}"; do
						git remote add "$r" "$remotes[$r]"
						git pull "$r" "$branch"
					done
				fi
			)
			(
				cd $MYZSH/remotes
				for d in *(N); do
					echo "Updating remote $d"
					myzsh update "$d"
				done
			)
			return
		else
			dir="$MYZSH/remotes/$dir"
		fi
		# Update via svn, if we can
		if svn info "$dir" 2>/dev/null >/dev/null; then
			svn up "$dir"
		# else git something
		elif [ -d "$dir/.git" ]; then
			echo "Decided that git was the best? $dir"
			cd "$dir"
			git pull
		else
			myzsh error "Unable to update remote $(basename "$dir")"
		fi
	;;
	# list info about all modules
	list)
		(
		# This is inside a code block so cd is ok
		local m
		local max
		# this is a hack to find the length of the longest module name
		max=$(for m in $MYZSH/**/modules/*; do
			n=${m##*/}
			[ ! -f "$m/$n" ] && continue
			echo ${#n}
		done | sort -n | tail -n 1);
		# dump them to the screen
		printf "%${max}s: %-13s %-13s %s\n" "Module" "Enabled" "Source" "Description"
		for m in $MYZSH/**/modules/*; do
			# find our specific module name
			n=${m##*/}
			# find our remote repo, if exists
			r=${m#$MYZSH/}
			if [ ${r%%/*} = "remotes" ]; then
				r=${r#remotes/}
				r=${r%%/*}
				r=${r:0:13}
			else
				r="myzsh"
			fi
			[ ! -f "$m/$n" ] && continue
			# figure out where our module is enabled, if at all
			enabled="$(
				for x in "${LPRIMARY[@]}"; do
					[ "$x" = "$n" ] && printf "LP "
				done
				for x in "${LSECONDARY[@]}"; do
					[ "$x" = "$n" ] && printf "LS "
				done
				for x in "${RPRIMARY[@]}"; do
					[ "$x" = "$n" ] && printf "RP "
				done
				for x in "${RSECONDARY[@]}"; do
					[ "$x" = "$n" ] && printf "RS "
				done
				for x in "${TITLE[@]}"; do
					[ "$x" = "$n" ] && printf "T "
				done
				for x in "${EXTRA[@]}"; do
					[ "$x" = "$n" ] && printf "E "
				done
			)"
			printf "%${max}s: %-13s %-13s %s\n" "$n" "$enabled" "$r" "$(awk '/^\#+\ ?Summary/ {getline; print $0}' $m/info.md 2>/dev/null)"
		done | sort -b
		)
	;;
	# get info about a module
	info)
		[ -z $MYZSH/**/modules/$mod/$mod(N) ] && myzsh error "Cannot find module $mod" && return 1
		[ -z $MYZSH/**/modules/$mod/info.md(N) ] && myzsh error "Info missing for module $mod" && return 1
		less $MYZSH/**/modules/$mod/info.md
	# test a module
	# TODO needs plenty more work
	;;
	test)
		[ -z $MYZSH/**/modules/$mod/$mod(N) ] && myzsh error "Cannot find module $mod" && return 1
		# setup a sub shell so we don't mess up our main environment since this is a function
		(
		function getvars() {
			set | sed '/^LINENO/d;/^ERRNO/d;/^-=/d'
		}
		SHELL=/dev/null
		cd "$MYZSH/modules" # TODO
		getvars > /tmp/set.before
		source "$mod/$mod"
		getvars > /tmp/set.after

		echo "== Variables changed during init =="
		diff -au /tmp/set.before /tmp/set.after | sed '/^ /d;/^@/d;/^+++/d;/^---/d'
		if [ -n "$OUTPUT" ]; then
			echo "== Errors while running output function =="
			getvars > /tmp/set.before
			$OUTPUT |read -r $out
			getvars > /tmp/set.after
			echo "== Variables changed after running output function =="
			diff -au /tmp/set.before /tmp/set.after | sed '/^ /d;/^@/d;/^+++/d;/^---/d'
			echo "== Output from output function =="
			echo "[$out]"
		fi
		rm /tmp/set.before /tmp/set.after
		)
	;;
	persistent)
		# determine if we need to change our shell
		if [ "${SHELL##*/}" = "zsh" ]; then
			myzsh error "Shell seems to be zsh already."
			return
		fi
		# let the user know what's up and change the shell to zsh
		echo "Changing shell to be zsh. Enter your login password if prompted."
		echo "Executing: chsh -s \$(which zsh)"
		chsh -s $(which zsh)
	;;
	save)
		# backup .zshrc if it's not MYZSH enabled
		if [ -s "$HOME/.zshrc" ]; then
		  grep -q "^MYZSH=" "$HOME/.zshrc" &> /dev/null || mv "$HOME/.zshrc" "$HOME/.zshrc.bk"
		fi
		# copy over our default zshrc if we don't have one
		if [ ! -s "$HOME/.zshrc" ]; then
			rm "$HOME/.zshrc" 2>/dev/null
			echo "Copying the default config to your $HOME/.zshrc"
			cp "$MYZSH/samples/zshrc.default" "$HOME/.zshrc"
			return
		fi
		sed -i"" -e "s/^LPRIMARY=[^)]*)\(.*\)/LPRIMARY=\(${LPRIMARY}\)\1/" "$HOME/.zshrc"
		sed -i"" -e "s/^LSECONDARY=[^)]*)\(.*\)/LSECONDARY=\(${LSECONDARY}\)\1/" "$HOME/.zshrc"
		sed -i"" -e "s/^RPRIMARY=[^)]*)\(.*\)/RPRIMARY=\(${RPRIMARY}\)\1/" "$HOME/.zshrc"
		sed -i"" -e "s/^RSECONDARY=[^)]*)\(.*\)/RSECONDARY=\(${RSECONDARY}\)\1/" "$HOME/.zshrc"
		sed -i"" -e "s/^TITLE=[^)]*)\(.*\)/TITLE=(${TITLE})\1/" "$HOME/.zshrc"
		sed -i"" -e "s/^EXTRA=[^)]*)\(.*\)/EXTRA=(${EXTRA})\1/" "$HOME/.zshrc"
		sed -i"" -e "s/^THEME=.*/THEME=\"${THEME}\"/" "$HOME/.zshrc"
		local global
		for k in "${(k)GLOBALS[@]}"; do
			# get our global variable abstractly
			eval global="\$$k"
			sed -i"" -e "/^$k=/d" "$HOME/.zshrc"
			if [ "${GLOBALS[$k]}" != "$global" ]; then
				sed -i"" -e "/^source/i\\
$k=\"$global\"
" "$HOME/.zshrc" # OS X is dumb
			fi
		done
		echo "$HOME/.zshrc has been updated"
	;;
	disable)
		# look for our module everywhere
		# remove it if we find it
		local f
		for f in {1..${#LPRIMARY[@]}};
			[ "$LPRIMARY[$f]" = "$mod" ] && LPRIMARY[$f]=()
		for f in {1..${#LSECONDARY[@]}};
			[ "$LSECONDARY[$f]" = "$mod" ] && LSECONDARY[$f]=()
		for f in {1..${#RPRIMARY[@]}};
			[ "$RPRIMARY[$f]" = "$mod" ] && RPRIMARY[$f]=()
		for f in {1..${#RSECONDARY[@]}};
			[ "$RSECONDARY[$f]" = "$mod" ] && RSECONDARY[$f]=()
		for f in {1..${#TITLE[@]}};
			[ "$TITLE[$f]" = "$mod" ] && TITLE[$f]=()
		for f in {1..${#EXTRA[@]}};
			[ "$EXTRA[$f]" = "$mod" ] && EXTRA[$f]=()
		# theme needs to be rehashed now
		init_myzsh
	;;
	enable)
		# make sure our user is calling us properly
		if [ $# -lt 2 ]; then
			myzsh error "Usage: myzsh enable [lprimary|lsecondary|rprimary|rsecondary|extra] [module] ..."
			return 1
		fi
		# save our location and shift it off the arguments stack
		location="$1"
		shift
		foreach mod in $@; do
			if [ ! -s $MYZSH/**/modules/$mod/$mod ]; then
				echo "Module $mod doesn't exist."
				return 1
			fi
		done
		case "$location" in
			lprimary)
				LPRIMARY+=($@)
			;;
			lsecondary)
				LSECONDARY+=($@)
			;;
			rprimary)
				RPRIMARY+=($@)
			;;
			rsecondary)
				RSECONDARY+=($@)
			;;
			title)
				TITLE+=($@)
			;;
			extra)
				EXTRA+=($@)
			;;
			*)
				myzsh error "Location must be exactly one of lprimary, lsecondary, rprimary, rsecondary, or extra"
				return 1
			;;
		esac
		init_myzsh
	;;
	remote)
		# make sure our user is calling us properly
		if [ $# -lt 2 ]; then
			myzsh error "Usage: myzsh remote [list|add [repo]|remove [repo]]"
			return 1
		fi
		# save our location and shift it off the arguments stack
		location="$1"
		shift
		case "$location" in
			add)
				for repo in $@; do
					echo "Adding repo $repo as a remote"
					pushd "$MYZSH/remotes/" &>/dev/null
					if [ ${repo%%://*} = "ssh" ]; then
						git clone "$repo"
					elif [ ${repo%%://*} = "git" ]; then
						git clone "$repo"
					elif [ ${repo%%://*} = "http" ]; then
						git clone "$repo" || svn co "$repo" || myzsh error "Error accessing $repo via git and svn"
					elif [ ${repo%%://*} = "https" ]; then
						git clone "$repo" || svn co "$repo" || myzsh error "Error accessing $repo via git and svn"
					elif [ ${repo%%://*} = "file" ]; then
						[ -d ${repo#file://*} ] && cp -R ${repo#file://*} . || myzsh error "Error remote must be a directory"
					fi
					popd &>/dev/null
				done
			;;
			remove)
				myzsh warning "Removing repos $@"
				rm -rf "$MYZSH/remotes/$@"
			;;
			list)
					pushd "$MYZSH/remotes/" &>/dev/null
					ls -1
					popd &>/dev/null
			;;
			*)
				# make sure our user is calling us properly
				myzsh error "Usage: myzsh remote [list|add [repo]|remove [repo]]"
				return 1
			;;
		esac

	;;
	set)
		local flag=0
		local key
		for key in "${(k)GLOBALS[@]}"; do
			[ "$key" = "$1" ] && flag=1
		done
		if [ $flag = 0 ]; then
			myzsh error "$1 isn't registered as a global variable."
			return
		fi
		if [ -z "$2" ]; then
			myzsh error "Usage: myzsh set VARIABLE VALUE"
			return
		fi
		echo "Setting: $1 to $2"
		eval $1="$2"
	;;
	unset)
		local flag=0
		local key
		for key in "${(k)GLOBALS[@]}"; do
			[ "$key" = "$1" ] && flag=1
		done
		if [ $flag = 0 ]; then
			myzsh error "$1 isn't registered as a global variable."
			return
		fi
		echo "Unsetting: $1"
		eval $1="${GLOBALS[$1]}"
	;;
	theme)
		if [ ! -e "$MYZSH/themes/$1/$1" -a ! -e "$MYZSH/remotes/*/themes/$1/$1" ]; then
			myzsh error "Theme $1 not found"
			return
		fi
		THEME="$1"
		source $MYZSH/**/themes/$THEME/$THEME
	;;
	version)
		branch=$(cd "$MYZSH"; git -c color.branch=no branch | awk '/^\*/ {print $2}')
		[ $branch = "master" ] && branch="stable"
		echo "$MYZSH_VERSION $branch"
	;;
	debug)
		if [ $# != 2 ]; then
			myzsh error "Usage: myzsh debug <DEBUGLEVEL> <MSG>"
			return
		fi
		local level=$1
		shift
		[ $DEBUG -ge $level ] && echo "myzsh debug: $@" >&2
	;;
	error)
		if [ $# != 1 ]; then
			myzsh error "Usage: myzsh error <MSG>"
			return
		fi
		echo "${fg[red]}Error:${terminfo[sgr0]} $@" >&2
	;;
	warning)
		if [ $# != 1 ]; then
			myzsh error "Usage: myzsh warning <MSG>"
			return
		fi
		echo "${fg[yellow]}Warning:${terminfo[sgr0]} $@" >&2
	;;
	*)
		cat <<dog
Usage: myzsh command
       myzsh edit|reload|info|list [module]

Management functions for myzsh.

Commands:
  edit - Edits a module with the default editor
  info - Displays information about a module
  reload - Reloads the module and redefines any output functions it specifies
  update - Updates myzsh
  list - Lists all modules
  save - Saves any changed variables to $HOME/.zshrc
  persistent - Sets shell to zsh if it's not already
  disable - Removes a module from any and all prompt locations
  enable - Adds a module to a prompt location
  remote - Add configs from git repo
  set - Set global variables
  unset - Unset global variables
  theme - Set current theme
  version - Displays current myzsh version

Report bugs to brimstone@the.narro.ws
myzsh homepage: <https://github.com/brimstone/myzsh>
dog
	;;
	esac
}

# basic system detection
if [ $(uname) = "Linux" ]; then
	function islinux {
		return 0
	}
	function isosx {
		return 1
	}
elif [ $(uname) = "Darwin" ]; then
	function islinux {
		return 1
	}
	function isosx {
		return 0
	}
else
	myzsh error "Please report uname=$(uname) to brimstone@the.narro.ws. Thanks!"
fi

function globalvar {
	local global
	# build up an array of global variables
	GLOBALS[$1]="$2"
	GLOBALMODS[$1]="$mod"
	GLOBALDESCS[$1]="$3"
	# setting $global to the value of the value of $1
	eval global="\$$1"
	# if the value of the variable refered to by $1 is nothing, then set it to our second argument
	[ -z "$global" ] && eval "$1=\"$2\""
}

function init_myzsh {
	# first Set any variables
	preexec_funcs=()
	precmd_funcs=(precmd_main)

	# Load any one time modules
	for m in $EXTRA; do
		OUTPUT=""
		myzsh reload "$m"
	done

	# then load the theme
	# check for theme, select our default if nothing's set
	[ -z "$THEME" ] && THEME="default"
	[ -z $MYZSH/**/themes/$THEME/$THEME(N) ] && THEME="default"
	source $MYZSH/**/themes/$THEME/$THEME

	lp_funcs=()
	for m in $LPRIMARY; do
		OUTPUT=""
		myzsh reload "$m" && lp_funcs+=($OUTPUT)
	done
	# Figure out our left secondary output
	ls_funcs=()
	for m in $LSECONDARY; do
		OUTPUT=""
		myzsh reload "$m" && ls_funcs+=($OUTPUT)
	done
	# Figure out our right primary output
	rp_funcs=()
	for m in $RPRIMARY; do
		OUTPUT=""
		myzsh reload "$m" && rp_funcs+=($OUTPUT)
	done
	# Figure out our right secondary output
	rs_funcs=()
	for m in $RSECONDARY; do
		OUTPUT=""
		myzsh reload "$m" && rs_funcs+=($OUTPUT)
	done

	# Figure out our title output
	title_funcs=()
	for m in $TITLE; do
		OUTPUT=""
		myzsh reload "$m" && title_funcs+=($OUTPUT)
	done
}

################################################################################
# Global variables

MYZSH_VERSION="1.4.2"

[ -z "$MYZSH" ] && myzsh error "\$MYZSH variable is undefined. This needs to be defined probably in $HOME/.zshrc"
[ ! -d "$MYZSH" ] && myzsh error "Directory refered to by \$MYZSH does not exist. You will probably not like the results."
# set other globals
[ -z "$EDITOR" ] && export EDITOR=vim
bindkey -e

typeset -A GLOBALS
typeset -A GLOBALMODS
typeset -A GLOBALDESCS
globalvar DEBUG 0

################################################################################
# Setup completion things

# Add our local completion directory
fpath+=("$MYZSH/completions" $MYZSH/remotes/*/completions(N))
# load the modules
autoload -U compinit
# autocompletion
compinit
# our completion should be loaded by now so we can link our completion function to our management function
compdef _myzsh myzsh

################################################################################
# Colors!

# make sure colors and terminal settings autoload
autoload colors zsh/terminfo
# if we don't have colors, RHEL
if [ -z "$terminfo" ]; then
	typeset -A terminfo
	for k in colors acsc enacs smacs rmacs sgr0 bold; do
		if (( ! $+terminfo[$k] )); then
			terminfo[$k]=$(tput $k)
		fi
	done
fi

# if we can do colors, init colors
if [ "$terminfo[colors]" -ge 8 ]; then
	colors
	fg[nocolor]=${terminfo[sgr0]}
fi

################################################################################
# Check environment

# alert the user if our shell doesn't look like zsh
if [ -n "$SHELL" -a "${SHELL##*/}" != "zsh" ]; then
	myzsh warning "zsh may not be your shell."
	myzsh warning "Run 'myzsh persistent' to set zsh as your shell."
	echo
fi
if [ ! -e "$HOME/.zshrc" ]; then
	myzsh warning "You don't seem to have a .zshrc config file."
	myzsh warning "Run 'myzsh save' to save a default .zshrc file."
	echo
fi

################################################################################
# Finally, setup theme and modules
init_myzsh

# vim: filetype=zsh noexpandtab
