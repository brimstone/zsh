globalvar GIT_USE_ICONS 0 "Enables Icons in prompt"
globalvar GIT_FETCH_CACHE_TIME 3600 "Frequency in which the git remote cache should be checked"

function _deps(){
	app="git"

	$(hash $app 2>/dev/null) || ( myzsh error "Couldn't find application ${app}" && return 1 )
}

function git () {
	case "$1" in
	push)
		case "$2" in
			all)
				local r
				for r in $(command git remote)
					command git push $r
			;;
			*)
				command git "$@"
			;;
		esac
	;;
	*)
		command git "$@"
	;;
	esac
}

function git_func () {
	local ingit
	git branch >/dev/null 2>/dev/null
	ingit=$?
	if [ "$ingit" = 0 ]; then
		local current_ver
		local min_ver
		local gitstatus
		local stash
		[ $GIT_USE_ICONS != 0 ] && printf "тна "

		# Check if greater than version 1.7.1
		current_ver=$(git --version | awk '{print $3}')
		min_ver="1.7.2"

		autoload -U is-at-least
		if is-at-least "$min_ver" "$current_ver"; then
			branch=$(git -c color.branch=no branch | awk '/^\*/ {print $2}' | sed 's/(//')
		else
			branch=$(git branch | awk '/^\*/ {print $2}' | sed 's/(//')
		fi

		printf "%s" "$branch"

		gitstatus="${$(git status --porcelain 2>/dev/null | awk '{print $1}' | sort | uniq -c | awk '{printf " "$2":"$1}')%%,}"
		if [ -n "$gitstatus" ]; then
			printf "%s" "$gitstatus"
		fi
		stash=$(git stash list 2>/dev/null | wc -l)
		if [ $stash -gt 0 ]; then
			printf " S:%d" "$stash"
		fi

		# check to see if we haven't fetched in a while
		if islinux; then
			[ -e "$(git rev-parse --show-toplevel)/.git/FETCH_HEAD" ] \
			&& [ $[ $(date +%s) - $(stat -c %Y "$(git rev-parse --show-toplevel)/.git/FETCH_HEAD" 2>/dev/null) ] -gt $GIT_FETCH_CACHE_TIME ] \
			&& git fetch 2>/dev/null &
		else
			[ -e "$(git rev-parse --show-toplevel)/.git/FETCH_HEAD" ] \
			&& [ $[ $(date +%s) - $(stat -f %c "$(git rev-parse --show-toplevel)/.git/FETCH_HEAD" 2>/dev/null) ] -gt $GIT_FETCH_CACHE_TIME ] \
			&& git fetch 2>/dev/null &
		fi

		if [ "$(git log -n 1 2>/dev/null)" != "" ]; then
			local_repo="$(git rev-parse HEAD)"
			remote_repo="no_remote" && [[ -n "$(git branch -vv | awk '/^\*.*\[.*\]/' | cut -d \[ -f 2 | cut -d \] -f 1)" ]] && remote_repo="$(git rev-parse '@{u}')"
			base="no_base" && [[ -n "$(git branch -vv | awk '/^\*.*\[.*\]/' | cut -d \[ -f 2 | cut -d \] -f 1)" ]] && base="$(git merge-base HEAD '@{u}')"
			if [ "$local_repo" = "$remote_repo" ]; then
				printf ""
			elif [ "$local_repo" = "$base" ]; then
				printf " pull"
			elif [ "$remote_repo" = "$base" ]; then
				printf " push"
			elif [ "$remote_repo" = "no_remote" ]; then
				printf " no-remote"
			else
				printf " diverged"
			fi
		else
			printf " new"
		fi
	fi
}

OUTPUT=git_func
# vim: filetype=zsh noexpandtab
